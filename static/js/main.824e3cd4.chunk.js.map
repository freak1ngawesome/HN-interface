{"version":3,"sources":["services/url.js","services/get.js","actions/index.js","services/setTime.js","components/item/item.js","components/buttons/buttons.js","components/pages/main/main.js","components/comment/comment.js","components/pages/info/info.js","components/header/header.js","components/footer/footer.js","components/preloader/preloader.svg","components/preloader/preloader.js","components/app/app.js","reducer/index.js","store.js","index.js"],"names":["baseURL","newsURL","preloader","document","getElementById","getNewsIds","a","fetch","response","ok","json","result","warning","createElement","textContent","appendChild","getNewsById","id","idURL","updateIds","arr","type","ids","updateCurrentData","obj","currentData","loading","bool","setTime","time","Date","toLocaleString","mapDispatchToProps","memo","connect","item_id","useState","data","setData","useEffect","then","className","to","pathname","onClick","title","descendants","score","by","ButtonPrev","ButtonReload","reload","state","map","index","Comment","comment_id","root","comments","kids","length","dangerouslySetInnerHTML","__html","text","e","target","nextSibling","style","display","currentLoading","Object","keys","window","localStorage","getItem","setItem","href","url","rel","timer","date","h","getHours","m","getMinutes","updateTime","setInterval","clearInterval","Footer","src","loader","alt","App","path","component","Info","Main","initialState","reducer","action","store","createStore","ReactDOM","render"],"mappings":"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","file":"static/js/main.824e3cd4.chunk.js","sourcesContent":["// базовый URL\r\nexport const baseURL = 'https://hacker-news.firebaseio.com/v0/';","import { baseURL } from './url'\r\n// добавляем к базовому URL запрос на 500 новых записей, ограничивая прием на 100 записей\r\nconst newsURL = baseURL + 'newstories.json?print=pretty&orderBy=\"$key\"&limitToFirst=100';\r\nconst preloader = document.getElementById('preloader');//находим прелоадер\r\n// запрос 100 последних новостей\r\nexport async function getNewsIds(){\r\n  const response = await fetch(newsURL);\r\n  // если статус HTTP-запроса в диапазлне 200-299\r\n  if (response.ok){\r\n    const result = await response.json();\r\n    return result; //возвращаем результат в виде промиса\r\n  } else {\r\n    // иначе, если онибка запроса, то добавляем сообщение об ошибке\r\n    const warning = document.createElement('div');\r\n    warning.textContent = 'Ошибка загрузки';\r\n    preloader.appendChild(warning);\r\n  };\r\n};\r\n// запрос новости(комментария) по id\r\nexport async function getNewsById(id){\r\n  const idURL = baseURL + `item/${id}.json?print=pretty`;\r\n  const response = await fetch(idURL);\r\n  // если статус HTTP-запроса в диапазлне 200-299\r\n  if (response.ok){\r\n    const result = await response.json();\r\n    return result;\r\n  } else {\r\n    // иначе, если онибка запроса, то добавляем сообщение об ошибке\r\n    const warning = document.createElement('div');\r\n    warning.textContent = 'Ошибка загрузки';\r\n    preloader.appendChild(warning);\r\n  };\r\n}\r\n\r\n","// тут описаны action'ы\r\nexport const updateIds = (arr) => {\r\n  return {\r\n    type: 'UPDATE_IDS',\r\n    ids: arr,\r\n  };\r\n};\r\nexport const updateCurrentData = (obj) => {\r\n  return {\r\n    type: 'UPDATE_CURRENT_DATA',\r\n    currentData: obj,\r\n  };\r\n};\r\nexport const loading = (bool) => {\r\n  return {\r\n    type: 'LOADING',\r\n    loading: bool,\r\n  };\r\n};","export function setTime(time){\r\n  let date = new Date(time * 1000);\r\n  return date.toLocaleString();\r\n};","import {useState,useEffect,memo} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\nimport {getNewsById} from '../../services/get.js';\r\nimport { updateCurrentData } from '../../actions/index.js';\r\nimport {setTime} from '../../services/setTime.js'\r\nimport './item.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Item({item_id,updateCurrentData}){\r\n// внутренний стейт кажлой новости\r\n  const [data,setData] = useState(null);\r\n// после монтирования компонента делаем запрос на сервер по переданному в компонент id и обновляем стейт\r\n  useEffect(() => {\r\n    getNewsById(item_id).then(data => setData(data));\r\n    return () => {setData(null)} // при размонтировании \"обнуляем\" стейт\r\n  },[item_id]);\r\n\r\n// если data есть то рендерим компонент\r\n  return data ? (\r\n    <div className='item'>\r\n      <div className='item__header'>\r\n        <Link to={{pathname: `/info/${data.id}`}}\r\n        onClick={() => updateCurrentData(data)}\r\n        >\r\n          <h2 className='item__label'>{data.title}</h2>\r\n        </Link>\r\n        <span className='item__comments-count'>{data.descendants}</span>\r\n      </div>\r\n      <div className='item__info'>\r\n        <div className='score'>\r\n          Рейтинг: {data.score}\r\n        </div>\r\n        <div className='author'>\r\n          {data.by}\r\n        </div>\r\n        <div className='date'>\r\n          {setTime(data.time)}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  ) : null // иначе не рендерим\r\n};\r\n\r\nItem.propTypes = {\r\n  item_id: PropTypes.number.isRequired,\r\n  updateCurrentData: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  updateCurrentData,\r\n};\r\n\r\nexport default memo(connect(null,mapDispatchToProps)(Item));","import { Link } from 'react-router-dom';\r\nimport './buttons.css';\r\nimport PropTypes from 'prop-types';\r\n\r\n// кнопка Назад\r\nexport function ButtonPrev(){\r\n  return(\r\n    <div className='buttonPrev nav_btn'>\r\n      <div>\r\n        <Link to={{pathname: `/`}}>Назад</Link>\r\n      </div>\r\n      \r\n    </div>\r\n  )\r\n};\r\n// конпка Обновить\r\nexport function ButtonReload({reload}){\r\n  return(\r\n    <div className='buttonPrev nav_btn'>\r\n      <button onClick={() => reload()}>Обновить</button>\r\n    </div>\r\n  )\r\n};\r\n\r\nButtonReload.propTypes = {\r\n  reload: PropTypes.func.isRequired,\r\n};","import {connect} from 'react-redux';\r\nimport Item from '../../item/item.js';\r\nimport { ButtonReload } from '../../buttons/buttons.js';\r\nimport {updateIds,loading} from '../../../actions/index.js';\r\nimport {getNewsIds} from '../../../services/get.js';\r\nimport './main.css';\r\nimport PropTypes from 'prop-types';\r\n\r\n// главная страница с новостями\r\nfunction Main({ids,updateIds,loading}){\r\n  return (\r\n    <section className='main__list'>\r\n      <ButtonReload reload={() => {// обновляем список id по нажатию\r\n        loading(true); // включаем загрузку\r\n        getNewsIds().then(data => {\r\n          updateIds(data);\r\n          loading(false);// скрываем загрузку\r\n        });\r\n      }}/>\r\n      {ids.map((item_id,index) => <Item item_id={item_id} key={index}/>)}\r\n    </section>\r\n  )\r\n};\r\n\r\nMain.propTypes = {\r\n  ids: PropTypes.array.isRequired,\r\n  updateIds: PropTypes.func.isRequired,\r\n  loading: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ids: state.ids,\r\n  }\r\n};\r\nconst mapDispatchToProps = {\r\n  updateIds,\r\n  loading,\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Main);","import {useState,useEffect,memo} from 'react';\r\nimport {getNewsById} from '../../services/get.js';\r\nimport './comment.css';\r\nimport {setTime} from '../../services/setTime.js'\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Comment({comment_id,root}){// получаем id комментария и показатель root, который определяет, является ли комментарий корневой\r\n// стейт комментария\r\n  const [data,setData] = useState(null);\r\n// после монтирования запрашиваем данные комментария\r\n  useEffect(() => {\r\n    // fetch запрос по Id, затем обновления стейта\r\n    getNewsById(comment_id).then(data => {\r\n      setData(data);\r\n      });\r\n  },[comment_id]);\r\n\r\n// функция для сбора списка дочерних комментариев\r\n  function loadComments(){\r\n    // если есть data, в которой есть kids и массив не пустой\r\n    if (data && data.kids && data.kids.length){\r\n      // возвращаем массив компонентов\r\n      return data.kids.map((comment_id,index) => <Comment comment_id={comment_id} key={index}/>)\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n  // переменная с массивом, рекурсивно вызываем комментарии\r\n  const comments = loadComments();\r\n  // если есть data, то грузим структуру комментария\r\n  return data ? (\r\n    <div className='comment' id='comment'>\r\n      <div className='comment__header'>\r\n        {data.by}, {setTime(data.time)}\r\n      </div>\r\n      <div className='comment__text' dangerouslySetInnerHTML={{__html: data.text}}></div>\r\n      {root && data && data.kids && data.kids.length  ? <div className='comment__btn' onClick={(e) => {\r\n        e.target.nextSibling.style.display === 'block' ?\r\n        e.target.nextSibling.style.display = 'none' :\r\n        e.target.nextSibling.style.display = 'block'\r\n        // выще описана логика работы конпки показать комментарии, проверка на наличие root\r\n      }}>Все комментарии</div> : null}\r\n      <div id={root ? 'descendants root' : 'descendants'} style={root ? {display: 'none'} : {display: 'block'}}>\r\n      {comments}\r\n      </div>\r\n    </div>\r\n  ) : null // иначе не рендерим ничего\r\n};\r\n\r\nComment.propTypes = {\r\n  comment_id: PropTypes.number.isRequired,\r\n  root: PropTypes.bool.isRequired,\r\n};\r\n\r\n// экспортируем компонент\r\nexport default memo(Comment);","import { useEffect, memo } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Comment from '../../comment/comment.js';\r\nimport { updateCurrentData,loading } from '../../../actions/index.js';\r\nimport { getNewsById } from '../../../services/get.js';\r\nimport { ButtonPrev, ButtonReload } from '../../buttons/buttons.js'\r\nimport './info.css';\r\nimport {setTime} from '../../../services/setTime.js'\r\nimport PropTypes from 'prop-types';\r\n\r\n// страница новости\r\nfunction Info({currentData,updateCurrentData,currentLoading,loading}){\r\n// при монтировании, если был переход с main, то кладем id в localStorage, чтобы при перезагрузке страницы в браузере, мы могли сделать запрос на новость\r\n  useEffect(() => {\r\n    if (Object.keys(currentData).length === 0){// если объект из пропс пришел пустой, то значит страница была перезагружена и надо взять id из localStorage и сделать повторый запрос\r\n      const id = window.localStorage.getItem('id');\r\n      getNewsById(id).then(data => {\r\n        updateCurrentData(data);\r\n      });\r\n    } else {\r\n      window.localStorage.setItem('id',`${currentData.id}`);\r\n    };\r\n  },[currentData]);\r\n// если есть data и идет загрузка, от таймера из header то обновляем новость, и комментарии\r\n  if (currentData && currentLoading){\r\n    getNewsById( window.localStorage.getItem('id')).then(data => {\r\n      loading(false);// убираем загрузку\r\n      updateCurrentData(data);// обновляем data\r\n    });\r\n  };\r\n// если есть data, kids и массив не пустой, то возвращаем массив элементов с комментами\r\n  function loadComments(){\r\n    if (currentData && currentData.descendants && currentData.kids.length){\r\n      return currentData.kids.map((comment_id,index) => <Comment comment_id={comment_id} root={true} key={index}/>)\r\n    } else {\r\n      return 'Нет комментариев';\r\n    }\r\n  };\r\n\r\n// массив с клмментами\r\n  const comments = loadComments();\r\n\r\n  return (\r\n    <section className='info__list'>\r\n      <div className='info__header'>\r\n        <h2 className='info__label' id='qwe'>{currentData.title}</h2>\r\n        <a href={currentData.url} className='info__url' target='_blank' rel=\"noreferrer\">{currentData.url}</a>\r\n      </div>\r\n      <div className='info__nav-btns'>\r\n        <ButtonPrev/>\r\n        <ButtonReload reload={() => {\r\n          loading(true);\r\n          getNewsById(currentData.id).then(data => {\r\n            updateCurrentData(data);\r\n          });\r\n        }}/>\r\n      </div>\r\n      <hr/>\r\n      <div className='info__block'>\r\n        <div className='info__block_author'>Автор: <span>{currentData.by}</span> </div>\r\n        <div className='info__block_date'>Дата и время публикации: <span>{setTime(currentData.time)}</span> </div>\r\n        <div className='info__block_comments-count'>Количество комментариев: <span>{currentData.descendants}</span> </div>\r\n      </div>\r\n      <div className='info__comments'>\r\n        {comments}\r\n      </div>\r\n    </section>\r\n  )\r\n};\r\n\r\nInfo.propTypes = {\r\n  currentData: PropTypes.object.isRequired,\r\n  updateCurrentData: PropTypes.func.isRequired,\r\n  currentLoading: PropTypes.bool.isRequired,\r\n  loading: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    currentData: state.currentData,\r\n    currentLoading: state.loading,\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  updateCurrentData,\r\n  loading\r\n};\r\n\r\nexport default memo(connect(mapStateToProps,mapDispatchToProps)(Info));","// import React from 'react';\r\nimport {useState,useEffect} from 'react';\r\nimport {getNewsIds} from '../../services/get.js';\r\nimport {connect} from 'react-redux';\r\nimport {updateIds,loading} from '../../actions/index.js';\r\nimport './header.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Header ({updateIds,loading}) {\r\n// стейт для работы таймера\r\n  const [time,setTime] = useState(timer());\r\n// после монтирования компонента устанавливаем таймер для работы часов\r\n  useEffect(() => {\r\n    let updateTime = setInterval(() => {\r\n      setTime(timer());\r\n    },\r\n    1000);\r\n    loading(true); // показываем загрузку\r\n    getNewsIds().then(data => { // делаем запрос на сервер\r\n      updateIds(data); // получаем массив id постов и обновляем store\r\n      loading(false); // скрываем загрузку\r\n    });\r\n    return function clean(){\r\n      clearInterval(updateTime);// отписка от таймера\r\n    };\r\n  },[time.m]);// вызов хука раз в минуту\r\n  // функция таймер\r\n  function timer(){\r\n    const date = new Date();\r\n    let h = date.getHours() < 10 ? '0' + date.getHours() : date.getHours();\r\n    let m = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes();\r\n    return {\r\n      h,\r\n      m,\r\n    }\r\n  };\r\n\r\n    return (\r\n      <>\r\n        <header className='header'>\r\n          <h1 className='header__label' id='header'>\r\n            Hacker News\r\n          </h1>\r\n          <div className='header__timer' id='timer'>\r\n            <span>{time.h}</span>:<span>{time.m}</span>\r\n          </div>\r\n        </header>\r\n      </>\r\n    );\r\n};\r\n\r\nHeader.propTypes = {\r\n  updateIds: PropTypes.func.isRequired,\r\n  loading: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  updateIds,\r\n  loading,\r\n};\r\n\r\n\r\n// экспорт шапки\r\nexport default connect(null,mapDispatchToProps)(Header);","import './footer.css';\r\n// просто footer\r\nfunction Footer(){\r\n  return(\r\n    <footer className='footer'>\r\n      <div className='footer__links'>\r\n        <div className='footer__link'>\r\n          <a href='https://github.com/freak1ngawesome' target='_blank' rel='noreferrer'>Github автора</a>\r\n        </div>\r\n        <div className='footer__link'>\r\n          <a href='https://news.ycombinator.com/news' target='_blank' rel='noreferrer'>Hucker News</a>\r\n        </div>\r\n      </div>\r\n    </footer>\r\n  )\r\n};\r\n\r\nexport default Footer;","export default __webpack_public_path__ + \"static/media/preloader.5ec33ab4.svg\";","import {connect} from 'react-redux';\r\nimport loader from './preloader.svg';\r\nimport './preloader.css';\r\nimport PropTypes from 'prop-types';\r\n// тут все просто: если из стейта приходит loading и он true - показываем загрузку иначе нет\r\nfunction Preloader({loading}){\r\n  return loading ? (\r\n    <div className='preloader' id='preloader'>\r\n      <img src={loader} alt='loading...' className='preloader__img'/>\r\n    </div>\r\n  ) : null\r\n};\r\n\r\nPreloader.propTypes = {\r\n  loading: PropTypes.bool.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.loading,\r\n  }\r\n};\r\n\r\nexport default connect(mapStateToProps,null)(Preloader);","// импортируем нужные зависимости\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n} from 'react-router-dom';\r\nimport Main from '../pages/main/main.js';\r\nimport Info from '../pages/info/info.js';\r\nimport Header from '../header/header.js';\r\nimport Footer from '../footer/footer.js';\r\nimport Preloader from '../preloader/preloader.js';\r\n\r\nimport './app.css'\r\n\r\n// оборачиваем наши компоненты в контейнер и роутер\r\nfunction App() {\r\n  return (\r\n    <Router> \r\n      <Preloader/>\r\n      <div className='container'>\r\n        <Header/>\r\n        <Switch>\r\n            <Route path='/info' component={Info} />\r\n            <Route path='/' component={Main} />\r\n        </Switch>\r\n        <Footer/>\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n// экспортируем\r\nexport default App;\r\n","// изначальное состояние\r\nconst initialState = {\r\n  ids: [], // массив id последних 100 постов\r\n  currentData: {}, // объект с данными по открытой новости\r\n  loading: true, // состояние загрузки/обновения данных\r\n};\r\n// описание reducer'а\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type){\r\n    case 'UPDATE_IDS':{\r\n      return {\r\n        ...state,\r\n        ids: action.ids,\r\n      }\r\n    }\r\n    case 'UPDATE_CURRENT_DATA':{\r\n      return {\r\n        ...state,\r\n        currentData: action.currentData,\r\n      }\r\n    }\r\n    case 'LOADING':{\r\n      return {\r\n        ...state,\r\n        loading: action.loading,\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;// экспорт reduser'а","import {createStore} from 'redux';\r\nimport reducer from './reducer';\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;\r\n\r\n// СОЗДАНИЕ STORE, не более","// импортируем зависимости\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/app/app.js';\r\nimport {Provider} from 'react-redux';\r\nimport store from './store.js'\r\nimport './index.css';\r\n\r\n// app оборачивается провайдером со store\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}